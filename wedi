#!/bin/bash

POSIXLY_CORRECT=yes # Dane zadanim, ze ma byt nastavene

### VLASTNE FUNKCIE ###

test_funkcia()
{
	echo Ja som iba test.
}

set_directory()
{	
	if [ $# -eq 1 ] && [ -d $1 ]
	then
		echo $1
	elif [ $# -eq 2 ] && [ -d $2 ]
	then
		echo $2

	elif [ $# -eq 3 ] && [ -d $3 ]
	then
		echo $3
	else
		echo $(pwd)
	fi
}

edit_file()
{
	FILE=$1 # Nazov suboru (pre lepsiu orientaciu)
	$EDITOR $1 # Editacia suboru
	# Kontrola ci nenastala chyba pri pokuse o editovanie
	if [ $? -eq 0 ]
	then
		echo Successfully edited file $FILE
		# Zapisanie do WEDI_RC ze subor bol editovany v nejakom case a zvysenie pocitadla editacii
		if [ ! -s "$WEDI_RC" ] # Subor na zapisovanie je prazdny
		then
			echo $DIRECTORY $FILE `date '+%Y-%m-%d %H:%M:%S'` 1 >> $WEDI_RC
		else
			LINE=$(awk -F" " -v dir="$DIRECTORY" -v file="$FILE" -v date="$(date +"%Y-%m-%d %H:%M:%S")" '$1 == dir && $2 == file { print $1, $2, date, $5+1 }' $WEDI_RC) # Nacita a upravi spravny riadok		
			echo LINE: $LINE
			if [[ -z "$LINE" ]]; # ak ziaden riadok nevyhovuje
			then
				#echo Subor este nebol upravovany
				echo $DIRECTORY $FILE `date '+%Y-%m-%d %H:%M:%S'` 1 >> $WEDI_RC
			else # Subor bol uz predtym upravovany, nahradit riadok s LINE			
				sed -i "/$FILE/ c\ $LINE" $WEDI_RC # Nahradenie povodneho riadku	
			fi
		fi
	else
		echo Failed to edit file $FILE
	fi
}

#######################

### NASTAVENIE EDITORA ###

if [ -z ${EDITOR} ] # EDITOR nie je nastaveny
then
	# Test ci je VISUAL nastaveny
	if [ -z ${VISUAL} ] # VISUAL nie je nastaveny
	then # nastavit na "vi"
		EDITOR=vi
	else # nastavit na VISUAL
		EDITOR=$VISUAL
	fi 
fi

##########################

### KONTROLA NASTAVENIA WEDI_RC ###

if [ -z ${WEDI_RC} ] # WEDI_RC nie je nastavena
then
	# CHYBA
	echo Error! WEDI_RC is not set. 
	exit 1 # 1 == chyba??
else # WEDI_RC je nastavena
	# Ak neexistuje subor, vytvorit prazdny
	if [ ! -f $WEDI_RC ] # subor dany WEDI_RC neexistuje zatial, vytvorit prazdny
	then
		touch $WEDI_RC
	fi
fi

###################################

## NASTAVENIE DIRECTORY ##

DIRECTORY=$(set_directory $@)
echo dir is $DIRECTORY # test spravnosti funkcie

## NASTAVENIE DIRECTORY ##


### SPRACOVANIE ARGUMENTOV ###

# Ziadne argumenty
if [ $# -eq 0 ]
then
	# Neboli zadane ziadne argumenty.
	echo 0 arg
	## VYBER NAPOSLEDY UPRAVOVANY Z DIR ##

	######################################

	## EDITUJ TEN SUBOR ##

	######################

# Nejake argumenty
else

	##################################
	
	# $1 je subor
	if [ -f $1 ]
	then
		echo edit file
		## EDITOVANIE SUBORU ##		
		edit_file $1
		#######################

	# $1 je priecinok
	elif [ $# -eq 1 ] && [ -d $1 ]
    	then 
		#DIRECTORY=$1
		echo 1args dir
		## VYBER NAPOSLEDY UPRAVOVANY ##

		################################

		## EDITUJ TEN SUBOR ##

		######################

	# prepinac -m
	elif [ $1 == "-m" ]
	then
		echo -m
		## VYBER NAJCASTEJSIE EDITOVANY ##

		##################################

		## EDITUJ TEN SUBOR ##

		######################

	# prepinac -l	
	elif [ $1 == "-l" ]
	then
		echo -l
		# Zobrazi zoznam adresarov, ktore boli v priecinku editovane

		## VYPIS ZOZNAM EDITOVANYCH SUBOROV ##

		######################################

	# prepinac -b	
	elif [ $1 == "-b" ] && [ $# -ge 2 ]
	then
		echo -b
		# Zobrazi zoznam adresarov, ktore boli v priecinku editovane pred datumom
		
		## VYPIS ZOZNAM SUBOROV EDITOVANYCH PRED DATUMOM ##

		###################################################

	# prepinac -a	
	elif [ $1 == "-a" ] && [ $# -ge 2 ]
	then
		echo -a
		# Zobrazi zoznam adresarov, ktore boli v priecinku editovane po datume

		## VYPIS ZOZNAM SUBOROV EDITOVANYCH PO DATUME ##

		################################################
	else
		echo Niekde je chyba v argumentoch	
	fi
fi

##############################
